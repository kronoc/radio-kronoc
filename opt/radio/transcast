#!/bin/bash

#initialise our variables
play="http://example.example/example.m3u"
play_type="live"
end_after="24:00:00"
start_from="0"
debug=false

if ! options=$(getopt -u -n "transcast" -o t:e:s:p:d -l type:,end:,start:,play:,debug -- "$@")
then
	exit 1
fi

set -- $options

while [ $# -gt 0 ]
do
    case $1 in
    -p|--play) play="$2" ; shift;;
    -t|--type) play_type="$2" ; shift;;
    -s|--start) start_from=$2 ; shift;;
    -e|--end) end_after=$2 ; shift;;
    -d|--debug) debug=true ;;
    (--) shift; break;;
    (-*) echo "$0: error - unrecognized option $1" 1>&2; exit 1;;
    (*) break;;
    esac
    shift
done

#cd "$(dirname $(readlink -f $0))"
cd ${HOME}/playlists;
pidfile="/tmp/transcast.pid"
[[ -f "$pidfile" ]] &&	kill -9 -"$(cat ${pidfile})" || echo "No previous instance found.";
echo $$>${pidfile};
killall mplayer;
killall get_iplayer;

pipe="/tmp/ckradio"
[[ ! -p $pipe ]] && mkfifo $pipe;

if $debug ; then 
	echo "play:$play play_type:$play_type start_from:$start_from end_after:$end_after debug:$debug"
	verbosity="-v"; 
else 
	verbosity="-quiet -really-quiet"; 
fi

mplayer_post=""
mplayer_opts="mplayer $verbosity -cache 4096 -cache-min 8 -ao pcm:fast:nowaveheader:file=$pipe -af resample=44100,channels=2 -vc null -vo null"

start=$(date +%s);
endARR=(${end_after//:/ });
end=$[${start}+$[$[${endARR[0]}*60*60]+$[${endARR[1]}*60]+$[${endARR[2]}]]];

#do everythin :-)

#if its a podcast generate a playlist and play that
if [ "$play_type" == "podcast" ]; then
	${HOME}/podcast2playlist url $play limit 1 > tmp.m3u
	play="tmp.m3u"
elif [ "$play_type" == "podcasts" ]; then
	${HOME}/podcast2playlist url $play limit 100 > tmp.m3u
	play="tmp.m3u"
fi;

while [ "${end}" -gt "`date +%s`" ] 
do
        now=$(date +%s);
	endpos=$[${end}-${now}]
	ss=$[$start_from+${now}-${start}]
	if [ $ss -lt "20" ]; then ss=0; fi;

	case "$play_type" in
		live)
			$mplayer_opts -endpos $endpos -playlist "$play" $mplayer_post
			;;
		direct)
			$mplayer_opts -endpos $endpos "$play" $mplayer_post
			;;
		archive)
			$mplayer_opts -ss $ss -endpos $end "$play" $mplayer_post
			;;
		shuffle)
			$mplayer_opts -playlist "$play" -shuffle $mplayer_post
			;;
		infinite)
			$mplayer_opts -playlist "$play" $mplayer_post
			;;
		bbc-radio)
			get_iplayer --stream --type=liveradio --pid radio:$play --amode=flashaac --stdout --nowrite | $mplayer_opts -endpos $endpos - $mplayer_post
			;;
		bbc-tv) 
			get_iplayer --stream --type=livetv --pid tv:$play --amode=flashaac --stdout --nowrite | $mplayer_opts -endpos $endpos - $mplayer_post
			;;
		bbc-iplayer)
			pid=$(curl -s http://www.bbc.co.uk/programmes/${play}/episodes/player.json?limit=1 | grep -Po '"episode","pid":".*?[^\\]"' | cut -d: -f2 | sed 's/.\(.*\)/\1/' | sed 's/\(.*\)./\1/')
			if [ -z "${pid}" ]; then pid=${play}; fi
			get_iplayer --pid radio:$pid --amode=flashaac --stdout --nowrite | $mplayer_opts -endpos $endpos - $mplayer_post
			;;
		podcast)
			$mplayer_opts -ss $ss -endpos $end -playlist "$play" $mplayer_post
			;;
		podcasts)
		        $mplayer_opts -ss $ss -endpos $end -playlist "$play" -shuffle $mplayer_post
		;;
		mms)
			$mplayer_opts -playlist "$play" 
			;;
		*)
			$mplayer_opts -endpos $endpos -playlist "$play" $mplayer_post
			;;
	esac
	sleep 1
	
done;

rm "$pidfile"
